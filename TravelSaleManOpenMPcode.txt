#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <omp.h>

#define N 4  // Number of cities

int graph[N][N] = {
    {0, 10, 15, 20},
    {10, 0, 35, 25},
    {15, 35, 0, 30},
    {20, 25, 30, 0}
};

int min_cost = INT_MAX;
int best_path[N+1];

void swap(int *a, int *b) {
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

int calculate_cost(int path[]) {
    int cost = 0;
    for (int i = 0; i < N - 1; i++)
        cost += graph[path[i]][path[i + 1]];
    cost += graph[path[N - 1]][path[0]];  // return to start
    return cost;
}

void tsp_brute_force() {
    int path[N];
    for (int i = 0; i < N; i++) path[i] = i;

    #pragma omp parallel
    {
        int local_min = INT_MAX;
        int local_path[N+1];

        #pragma omp for schedule(dynamic)
        for (int i = 0; i < 120; i++) {  // 120 â‰ˆ factorial(5), for bigger N use permutation generator
            int temp[N];
            for (int j = 0; j < N; j++) temp[j] = path[j];

            // Generate permutation i using stdlib qsort-like logic
            for (int k = 0; k < i; k++) {
                int a = rand() % N;
                int b = rand() % N;
                swap(&temp[a], &temp[b]);
            }

            int cost = calculate_cost(temp);
            if (cost < local_min) {
                local_min = cost;
                for (int j = 0; j < N; j++) local_path[j] = temp[j];
                local_path[N] = temp[0]; // to complete the loop
            }
        }

        #pragma omp critical
        {
            if (local_min < min_cost) {
                min_cost = local_min;
                for (int j = 0; j <= N; j++) best_path[j] = local_path[j];
            }
        }
    }
}

int main() {
    double start = omp_get_wtime();
    tsp_brute_force();
    double end = omp_get_wtime();

    printf("Minimum Cost: %d\n", min_cost);
    printf("Best Path: ");
    for (int i = 0; i <= N; i++) printf("%d ", best_path[i]);
    printf("\nTime: %.4f seconds\n", end - start);

    return 0;
}


Output:

Minimum Cost: 80
Best Path: 3 2 0 1 3
Time: 0.0000 seconds