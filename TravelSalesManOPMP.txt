#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <omp.h>

using namespace std;

const int N = 4; // number of cities
int dist[N][N] = {
    {0, 10, 15, 20},
    {10, 0, 35, 25},
    {15, 35, 0, 30},
    {20, 25, 30, 0}
};

int main() {
    vector<int> cities;
    for (int i = 1; i < N; ++i) cities.push_back(i); // start from city 0

    int min_path = INT_MAX;

    #pragma omp parallel
    {
        int local_min = INT_MAX;

        #pragma omp for
        for (int i = 0; i < 6; ++i) { // 3! = 6 permutations
            vector<int> local_cities = cities;
            for (int j = 0; j < i; ++j) next_permutation(local_cities.begin(), local_cities.end());

            int current_path = 0;
            int k = 0;
            for (int j = 0; j < local_cities.size(); ++j) {
                current_path += dist[k][local_cities[j]];
                k = local_cities[j];
            }
            current_path += dist[k][0]; // return to start

            if (current_path < local_min) local_min = current_path;
        }

        #pragma omp critical
        {
            if (local_min < min_path) min_path = local_min;
        }
    }

    cout << "Minimum path cost: " << min_path << endl;
    return 0;
}
