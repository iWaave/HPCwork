#include <iostream>
#include <omp.h>
#include <vector>

using namespace std;

// Merge two sorted halves
void merge(vector<int>& arr, int left, int mid, int right) {
    vector<int> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;

    while(i <= mid && j <= right) {
        if(arr[i] <= arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }

    while(i <= mid) temp[k++] = arr[i++];
    while(j <= right) temp[k++] = arr[j++];

    for(int p = 0; p < temp.size(); ++p)
        arr[left + p] = temp[p];
}

// Recursive merge sort with OpenMP parallelization
void parallelMergeSort(vector<int>& arr, int left, int right, int depth = 0) {
    if(left >= right) return;

    int mid = (left + right) / 2;

    // Parallelize if under recursion depth
    if (depth <= 3) {
        #pragma omp parallel sections
        {
            #pragma omp section
            parallelMergeSort(arr, left, mid, depth + 1);
            
            #pragma omp section
            parallelMergeSort(arr, mid + 1, right, depth + 1);
        }
    } else {
        parallelMergeSort(arr, left, mid, depth + 1);
        parallelMergeSort(arr, mid + 1, right, depth + 1);
    }

    merge(arr, left, mid, right);
}

int main() {
    vector<int> data = {38, 27, 43, 3, 9, 82, 10};

    cout << "Original array: ";
    for (int n : data) cout << n << " ";
    cout << "\n";

    #pragma omp parallel
    {
        #pragma omp single
        parallelMergeSort(data, 0, data.size() - 1);
    }

    cout << "Sorted array: ";
    for (int n : data) cout << n << " ";
    cout << "\n";

    return 0;
}
