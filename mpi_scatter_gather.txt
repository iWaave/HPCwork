#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define N 8  // Total number of elements (must be divisible by number of processes)

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);
    double start = MPI_Wtime();

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int* data = NULL;
    int* chunk = malloc((N / size) * sizeof(int));
    int* result = NULL;

    if (rank == 0) {
        data = malloc(N * sizeof(int));
        result = malloc(N * sizeof(int));
        for (int i = 0; i < N; i++)
            data[i] = i + 1;
    }

    MPI_Scatter(data, N / size, MPI_INT, chunk, N / size, MPI_INT, 0, MPI_COMM_WORLD);

    for (int i = 0; i < N / size; i++)
        chunk[i] *= 2;

    MPI_Gather(chunk, N / size, MPI_INT, result, N / size, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Result after doubling:\n");
        for (int i = 0; i < N; i++)
            printf("%d ", result[i]);
        printf("\n");
    }

    double end = MPI_Wtime();
    if (rank == 0)
        printf("Execution Time: %.6f seconds\n", end - start);

    if (rank == 0) {
        free(data);
        free(result);
    }
    free(chunk);

    MPI_Finalize();
    return 0;
}



Input (Cmd optional):
mpiexec -n 1 openmpp.exe
Replace -n 1 with any number of processes you want



Output:
Result after doubling:
2 4 6 8 10 12 14 16
Execution Time: 0.002083 seconds
